Project: Reti Debugger
Author: Robin Sonner
License: MIT (view License.txt)
inspired by the lectures "Technische Informatik" and "Betriebssysteme" at Albert-Ludwig Universit√§t, Freiburg

# Note: Should follow the specifications of "Technische Informatik" precisely (if not that's a bug, let me know).

Documentation for all available instructions:

Hashtag Symbol is used as comment indicator, lines beginning with <#> will be ignored.
Empty lines will be ignored
The instruction <JUMP 0> is used to terminate the your program

D = Destination (ACC, IN1, IN2, PC)
S = Source (ACC, IN1, IN2, PC)
i = Integer, numbers allowed in range [-2^21, 2^21 - 1]
Registers (S, D) allow numbers in range [-2^31, 2^31 - 1]
Valid memory adresses are in range [0, 2^32]

Instruction Syntax 	Description					Program Counter 		Example
LOAD D i		D = memory[i]					PC += 1 if D != PC		LOAD ACC 5 -> ACC = memory[5]
LOADIN1 D i		D = memory[IN1 + i]				PC += 1 if D != PC		LOADIN1 ACC 5 -> ACC = memory[7]  if IN1 = 2
LOADIN2 D i		D = [IN2 + i]					PC += 1 if D != PC		LOADIN2 ACC 5 -> ACC = memory[9]  if IN2 = 4
LOADI D i		D = i						PC += 1 if D != PC		LOADI IN1 8 -> IN1 = 8

STORE i			memory[i] = ACC					PC += 1				STORE 8 -> memory[8] = 11 if ACC = 11
STOREIN1 i 		memory[IN1 + i] = ACC				PC += 1				STOREIN1 8 -> memory[9] = 11 if ACC = 11 and IN1 = 1
STOREIN2 i		memory[IN2 + i] = ACC				PC += 1				STOREIN2 2 -> memory[5] = 11 if ACC = 11 and IN2 = 3
MOVE S D 		D = S						PC += 1 if D != PC		MOVE PC ACC -> ACC = 8 if PC = 8

SUBI D i		D -= i						PC += 1 if D != PC		SUBI IN1 5 -> IN1 = IN1 - 5
ADDI D i 		D += i						PC += 1 if D != PC		ADDI IN1 10 -> IN1 = IN1 + 10
OPLUSI D i 		D = XOR(D, i)					PC += 1 if D != PC		OPLUSI ACC 12 -> new ACC = 9 if old ACC = 5
ORI D i 		D = OR(D, i)					PC += 1 if D != PC		ORI ACC 16  -> new ACC = 21 if old ACC = 5
ANDI D i		D = AND(D, i)					PC += 1 if D != PC		ANDI ACC 16 -> new ACC = 0 if old ACC = 5

SUB D i			D -= memory[i]					PC += 1 if D != PC		SUB ACC 5 -> ACC = ACC - memory[5]
ADD D i			D += memory[i]					PC += 1 if D != PC		ADD ACC 5 -> ACC = ACC + memory[5]
OPLUS D i		D = XOR(D, memory[i])				PC += 1 if D != PC		OPLUS ACC 3 -> new ACC = 9 if old ACC = 5 and memory[3] = 12
OR D i 			D = OR(D, memory[i])				PC += 1 if D != PC		OR ACC 4  -> new ACC = 21 if old ACC = 5 and memory[4] = 16
AND D i			D = AND(D, memory[i])				PC += 1 if D != PC		AND ACC 4 -> new ACC = 0 if old ACC = 5 and memory[4] = 16

NOP 			No Operation					PC += 1				NOP -> Only increments program counter by +1
JUMP> i			PC += i if ACC > 0, else PC += 1		PC += 1 if condition False	JUMP> 3  -> PC = PC + 3 if ACC > 0
JUMP= i			PC += i if ACC == 0, else PC += 1		PC += 1 if condition False	JUMP> -3 -> PC = PC - 3 if ACC = 0
JUMP>= i		PC += i if ACC >= 0, else PC += 1		PC += 1 if condition False	JUMP> 3  -> PC = PC + 3 if ACC >= 0
JUMP< i			PC += i if ACC < 0, else PC += 1		PC += 1 if condition False	JUMP> -3 -> PC = PC - 3 if ACC < 0
JUMP!= i		PC += i if ACC != 0, else PC += 1		PC += 1 if condition False	JUMP> 3  -> PC = PC + 3 if ACC != 0
JUMP<= i		PC += i if ACC <= 0, else PC += 1		PC += 1 if condition False	JUMP> -3 -> PC = PC - 3 if ACC <= 0
JUMP i			PC += i						PC += i 			JUMP> 3  -> PC = PC + 3
